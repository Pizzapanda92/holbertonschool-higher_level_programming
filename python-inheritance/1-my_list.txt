
Instructions for MyList
=======================

Overview
========

The `MyList` class extends the built-in Python `list` class. It behaves like a standard list but includes an additional method: `print_sorted()`. This method prints a sorted version of the list, without altering its original order.

Creating a MyList Object
========================

The `MyList` class can be initialized just like a regular list. If no argument is passed during instantiation, it will create an empty list:

::

    >>> MyList = __import__('1-my_list').MyList
    >>> my_list = MyList()
    >>> print(my_list)
    []

You can also pass an iterable (like another list) when creating an instance:

::

    >>> my_list = MyList([7, 2, 5])
    >>> print(my_list)
    [7, 2, 5]

If a non-iterable is provided (e.g., `None`), a `TypeError` will occur:

::

    >>> my_list = MyList(None)
    Traceback (most recent call last):
    TypeError: 'NoneType' object is not iterable

Note: Passing multiple arguments during instantiation is also invalid and will raise an error:

::

    >>> my_list = MyList([1, 2], [3, 4])
    Traceback (most recent call last):
    TypeError: list() takes at most 1 argument (2 given)

Usage of MyList
===============

Since `MyList` is a subclass of `list`, it inherits all standard list behaviors and methods. You can use methods such as:

- `append()`: Adds an item to the list.
- Indexing: Access list elements using indexes.

For instance:

::

    >>> my_list = MyList()
    >>> my_list.append(10)
    >>> my_list.append(20)
    >>> print(my_list)
    [10, 20]

Or accessing elements via index:

::

    >>> my_list[0] = 5
    >>> print(my_list)
    [5, 20]

As with regular lists, you can remove elements using `remove()`:

::

    >>> my_list.remove(5)
    >>> print(my_list)
    [20]

The `print_sorted()` Method
===========================

`MyList` comes with an additional method, `print_sorted()`, that prints a sorted version of the list, while leaving the original list unchanged.

Example:

::

    >>> my_list = MyList([4, 1, 3, 2])
    >>> my_list.print_sorted()
    [1, 2, 3, 4]
    >>> print(my_list)
    [4, 1, 3, 2]

No arguments should be passed to `print_sorted()`. If any arguments are provided, a `TypeError` will be raised:

::

    >>> my_list.print_sorted(1)
    Traceback (most recent call last):
    TypeError: print_sorted() takes no arguments

Sorting with Strings
====================

If `MyList` contains strings, `print_sorted()` will sort the list in alphabetical (lexicographical) order:

::

    >>> my_list = MyList(["Banana", "Apple", "Cherry"])
    >>> my_list.print_sorted()
    ['Apple', 'Banana', 'Cherry']
    >>> print(my_list)
    ['Banana', 'Apple', 'Cherry']

Important Note
==============

If the list contains items of different types (such as integers and strings), attempting to use `print_sorted()` will result in a `TypeError`, as Python cannot compare elements of different types.

::

    >>> my_list = MyList([1, "Apple", 3])
    >>> my_list.print_sorted()
    Traceback (most recent call last):
    TypeError: '<' not supported between instances of 'str' and 'int'

Empty Lists
===========

If the list is empty, calling `print_sorted()` will simply display an empty list:

::

    >>> my_list = MyList()
    >>> my_list.print_sorted()
    []
